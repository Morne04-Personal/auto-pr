name: Auto Pull Request with Gemini Review (Direct API Key)

on:
  push:
    branches:
      - main

jobs:
  create_pr_and_review:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          npm install @octokit/rest
          npm install @google/generative-ai

      - name: Create Pull Request
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure Git identity
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Get the current and previous commit SHAs
          CURRENT_SHA=$(git rev-parse HEAD)
          PREVIOUS_SHA=$(git rev-parse HEAD~1)

          # Create a new branch from the previous commit
          BRANCH_NAME="auto-pr/$CURRENT_SHA"
          git checkout -b "$BRANCH_NAME" $PREVIOUS_SHA

          # Cherry-pick the current commit onto the new branch
          git cherry-pick $CURRENT_SHA

          # Push the branch with the cherry-picked commit
          git push origin "$BRANCH_NAME"

          # Get the commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          # Create Pull Request using Node.js
          PR_NUMBER=$(node -e "
            process.env.COMMIT_MESSAGE = '$COMMIT_MESSAGE';
            process.env.BRANCH_NAME = '$BRANCH_NAME';
            process.env.CURRENT_SHA = '$CURRENT_SHA';

            async function main() {
              const { Octokit } = await import('@octokit/rest');
              const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

              try {
                const owner = process.env.GITHUB_REPOSITORY_OWNER;
                const repo = process.env.GITHUB_REPOSITORY.split('/')[1];

                const response = await octokit.pulls.create({
                  owner,
                  repo,
                  title: process.env.COMMIT_MESSAGE,
                  head: process.env.BRANCH_NAME,
                  base: 'main',
                  body: 'Automated PR for commit ' + process.env.CURRENT_SHA + '\\nCommit message: ' + process.env.COMMIT_MESSAGE,
                });

                console.log('Pull request created:', response.data.html_url);
                console.log('::set-output name=pr_number::' + response.data.number); // Set output for next step
                process.exit(0);
              } catch (error) {
                console.error('Error creating pull request:', error);
                process.exit(1);
              }
            }

            main().catch((error) => {
              console.error(error);
              process.exit(1);
            });
          ")
          echo "PR Number: $PR_NUMBER"

      - name: Review Pull Request with Gemini
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ steps.create_pr.outputs.pr_number }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
        run: |
          echo "Reviewing PR #$PR_NUMBER"

          node -e '
            async function main() {
              const { Octokit } = await import("@octokit/rest");
              const { GoogleGenerativeAI } = await import("@google/generative-ai");

              const githubToken = process.env.GITHUB_TOKEN;
              const geminiApiKey = process.env.GEMINI_API_KEY;
              const prNumber = process.env.PR_NUMBER;
              const owner = process.env.GITHUB_OWNER;
              const repo = process.env.GITHUB_REPO;

              async function getDiff(octokit, owner, repo, prNumber) {
                const { data: diff } = await octokit.pulls.get({
                  owner,
                  repo,
                  pull_number: prNumber,
                  mediaType: {
                    format: "diff",
                  },
                });
                return diff;
              }

              async function generateGeminiReview(diff) {
                const genAI = new GoogleGenerativeAI(geminiApiKey);
                const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest" }); // Or gemini-pro

                const prompt = `Review this code diff for potential issues, bugs, security vulnerabilities, and style violations. Provide specific line numbers and file paths where problems are found. Use Markdown formatting to highlight code snippets. For each issue, include a brief explanation. Focus on practical and actionable suggestions. Be concise. The code diff:\\n${diff}`;

                try {
                  const result = await model.generateContent(prompt);
                  const responseText = result.candidates[0].content.parts[0].text;
                  console.log("Gemini Review:", responseText);
                  return responseText;
                } catch (error) {
                  console.error("Gemini API Error:", error);
                  throw error; // Re-throw to stop the workflow
                }
              }

              async function postGitHubComments(octokit, owner, repo, prNumber, geminiReview) {
                const commentRegex = /^(.*?)(Line\\s+\\d+,\\s+.*?):(.*)$/gm;
                let match;
                const comments = [];

                while ((match = commentRegex.exec(geminiReview)) !== null) {
                    const filePath = match[1].trim();
                    const lineInfo = match[2].trim();
                    const commentBody = match[3].trim();
                    const lineNumberMatch = lineInfo.match(/Line\\s+(\\d+)/);
                    const lineNumber = lineNumberMatch ? parseInt(lineNumberMatch[1]) : null;
                    comments.push({ filePath, lineNumber, commentBody });
                }
                console.log("Parsed Comments:", comments);
                // Iterate through the comments and post them to the pull request.
                for (const comment of comments) {

                    if (comment.lineNumber !== null) {
                      try {
                        await octokit.pulls.createReviewComment({
                          owner,
                          repo,
                          pull_number: prNumber,
                          body: comment.commentBody,
                          path: comment.filePath, // Determine this from the comment body. Needs to be extracted or Gemini can provide it.
                          position: comment.lineNumber,
                        });
                        console.log("Comment posted to line:", comment.lineNumber);
                      } catch (error) {
                        console.error(`Error posting comment to line: ${comment.lineNumber}, error: ${error}`);
                      }
                    } else {
                      console.warn(`Could not find line number for comment: ${comment.commentBody}`);
                    }
                }
              }

              try {
                const octokit = new Octokit({ auth: githubToken });
                const diff = await getDiff(octokit, owner, repo, prNumber);
                const geminiReview = await generateGeminiReview(diff);
                await postGitHubComments(octokit, owner, repo, prNumber, geminiReview);

              } catch (error) {
                console.error(`Error reviewing pull request: ${error}`);
                process.exit(1);
              }
            }

            main().catch((error) => {
              console.error(error);
              process.exit(1);
            });
          '